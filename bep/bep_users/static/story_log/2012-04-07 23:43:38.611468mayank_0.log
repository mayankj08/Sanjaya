import wave
import struct

"""Given a file-like object or file path representing a wave file,
    decompose it into its constituent PCM data streams.

    Input: A file like object or file path
    Output: A list of lists of integers representing the PCM coded data stream channels
        and the sample rate of the channels (mixed rate channels not supported)
"""
stream = wave.open("kunal.wav","rb")

num_channels = stream.getnchannels()
sample_rate = stream.getframerate()
sample_width = stream.getsampwidth()
num_frames = stream.getnframes()

raw_data = stream.readframes( num_frames ) # Returns byte data
stream.close()

total_samples = num_frames * num_channels

if sample_width == 1: 
        fmt = "%iB" % total_samples # read unsigned chars
elif sample_width == 2:
        fmt = "%ih" % total_samples # read signed 2 byte shorts
else:
        raise ValueError("Only supports 8 and 16 bit audio formats.")

integer_data = struct.unpack(fmt, raw_data)
del raw_data # Keep memory tidy (who knows how big it might be)

channels = [ [] for time in range(num_channels) ]

for index, value in enumerate(integer_data):
        bucket = index % num_channels
        channels[bucket].append(value)

stream1 = wave.open("rt.wav","rb")

num_channels1 = stream1.getnchannels()
sample_rate1 = stream1.getframerate()
sample_width1 = stream1.getsampwidth()
num_frames1 = stream1.getnframes()

raw_data1 = stream1.readframes( num_frames1 ) # Returns byte data
stream1.close()

total_samples1 = num_frames1 * num_channels1

if sample_width1 == 1:
        fmt1 = "%iB" % total_samples1 # read unsigned chars
elif sample_width1 == 2:
        fmt1 = "%ih" % total_samples1 # read signed 2 byte shorts
else:
        raise ValueError("Only supports 8 and 16 bit audio formats.")

integer_data1 = struct.unpack(fmt1, raw_data1)
del raw_data1 # Keep memory tidy (who knows how big it might be)

channels1 = [ [] for time in range(num_channels1) ]

for index1, value1 in enumerate(integer_data1):
        bucket1 = index1 % num_channels1
        channels1[bucket1].append(value1)




for i in range(0,num_frames-1):
	print i
	channels[0][i] = int(round(2*(channels[0][i]+channels1[0][i])-(channels[0][i]*channels1[0][i])/32767 - 32767))
	channels[1][i] = int(round(2*(channels[1][i]+channels1[1][i])-(channels[1][i]*channels1[1][i])/32767 - 32767))
	


